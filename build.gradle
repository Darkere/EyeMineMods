buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


String semver = "${version_major}.${version_minor}.${version_patch}"
version = "${semver}"
group = 'com.specialeffect.eyemine' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'eyemine'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}


sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.    
    mappings channel: "snapshot", version: project.mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            mods {
                jei {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        server {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            mods {
                jei {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
        data {
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run')
            args '--mod', 'jei', '--all', '--output', file('src/generated/resources/')
            mods {
                jei {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }    
}

dependencies {
    minecraft([
        group  : "${project.forgegroup}",
        name   : "forge",
        version: "${project.mcversion}-${project.forgeversion}"
    ])
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "EyeMine",
                "Specification-Vendor": "SpecialEffect",
                "Specification-Version": "${semver}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"SpecialEffect",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}


// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
